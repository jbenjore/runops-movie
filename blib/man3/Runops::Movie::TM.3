.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Runops::Movie::TM 3"
.TH Runops::Movie::TM 3 "2009-04-21" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Runops::Movie::TM \- (fork of Treemap) Create Treemaps from various sources of data.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& #!/usr/bin/perl \-w
\& use Treemap::Squarified;
\& use Treemap::Input::Dir;
\& use Treemap::Output::Imager;
\& 
\& my $dir = Treemap::Input::Dir\->new();
\& my $imager = Treemap::Output::Imager\->new( WIDTH=>1024, HEIGHT=>768, 
\&                                            FONT_FILE=>"ImUgly.ttf" );
\& $dir\->load( "/home" );
\& 
\& my $treemap = new Treemap::Squarified( INPUT=>$dir, OUTPUT=>$imager );
\& $treemap\->map();
\& $imager\->save( "test.png" );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This base class is not meant to be directly instantiated. Subclasses of Treemap
which implement specific Treemap layout algorithms should be instantiated
instead. See the \s-1SEE\s0 \s-1ALSO\s0 section below for a list.
.PP
Traditional representations of hiarchal information trees are very space
consuming.  There is a large amount of redundant information and padding to
convey the tree structure.
.PP
Treemaps are representations of trees that use space-filling nested
rectangles to convey the tree structure.
.PP
e.g., a directory tree:
.PP
.Vb 10
\&   2       ./CVS/Root
\&   2       ./CVS/Repository
\&   2       ./CVS/Entries
\&   2       ./CVS/Entries.Log
\&   10      ./CVS
\&   2       ./Treemap/CVS/Root
\&   2       ./Treemap/CVS/Repository
\&   2       ./Treemap/CVS/Entries
\&   2       ./Treemap/CVS/Entries.Log
\&   .
\&   .
\&   .
\&   (goes on for 80 lines)
.Ve
.PP
e.g., a treemap of a directory tree:
.PP
.Vb 12
\& .\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-.
\& |             ROOT              |
\& |.\-\-\-\-\-\-\-\-\-\-\-..\-\-\-\-\-\-\-..\-\-\-\-\-\-\-.|
\& ||ImUgly.ttf ||Treemap||  CVS  ||
\& ||           ||.\-\-\-\-\-.||       ||
\& ||           |||Input|||       ||
\& ||           |||     || >\-\-\-\-\-< |
\& ||           || >\-\-\-< ||example||
\& ||           |||Outpu|||       ||
\& ||           ||\`_\|_\|_\|_\|_\*(Aq||       ||
\& |\`\-\-\-\-\-\-\-\-\-\-\-\*(Aq\`\-\-\-\-\-\-\-\*(Aq\`\-\-\-\-\-\-\-\*(Aq|
\& \`\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\*(Aq
.Ve
.PP
Raster output is much more useful (like a \s-1GIF\s0, or \s-1PNG\s0) than ascii, as the
labels are scaled appropriately, and alpha transparency is used to show
information that would otherwise be hidden.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fInew()\fR" 4
.IX Item "new()"
.RS 4
.PD 0
.IP "\s-1INPUT\s0" 4
.IX Item "INPUT"
.PD
A Treemap::Input object reference.
.IP "\s-1OUTPUT\s0" 4
.IX Item "OUTPUT"
A Treemap::Output object reference.
.IP "\s-1PADDING\s0" 4
.IX Item "PADDING"
Distance between in a parent rectangle, and all it's children in points.
Points being whatever unit of measurement the drawing routines of the output
object uses.
.IP "\s-1SPACING\s0" 4
.IX Item "SPACING"
Spacing around the outside of a rectangle in points. Points being whatever unit
of measurement the drawing routines of the output object uses.
.RE
.RS 4
.Sp
For a wondeful surprise, set \s-1PADDING\s0, and \s-1SPACING\s0 to zero. It's more difficult
to see the nesting, but it reveals other structures that you likely won't see
unless you render your treemap at an extremely high resolution.
.RE
.IP "\fImap()\fR" 4
.IX Item "map()"
Perform the actual operation of treemapping.
.SH "EXPORT"
.IX Header "EXPORT"
None by default.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Treemap Layout Classes:
.PP
Treemap::Strip, Treemap::Squarified
.PP
Treemap Input Classes:
.PP
Treemap::Input
.PP
Treemap Output Classes:
.PP
Treemap::Output
.SH "BUGS"
.IX Header "BUGS"
Subclasses should autoload in some manner to ease developer use.
.PP
Violates data incapsulation, and reaches into the innards of Treemap::Input objects. It really shouldn't do that.
.SH "AUTHORS"
.IX Header "AUTHORS"
Simon Ditner <simon@uc.org>, and Eric Maki <eric@uc.org>
.SH "CREDITS"
.IX Header "CREDITS"
Original Treemap Concept: Ben Shneiderman <ben@cs.umd.edu>,
http://www.cs.umd.edu/hcil/treemap\-history/index.shtml
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 312:" 4
.IX Item "Around line 312:"
=back doesn't take any parameters, but you said =back 4
.IP "Around line 322:" 4
.IX Item "Around line 322:"
=back doesn't take any parameters, but you said =back 4
