#!/opt/perl/bin/perl
use strict;
use warnings;
use 5.010_000;
use feature ':5.10';
use Getopt::Long qw( GetOptions );
use Runops::Movie::Util qw( pretty_size );
use File::Spec::Functions qw( catfile );
use Carp ();
$SIG{__WARN__} = \&Carp::cluck;

# Read options
#
my ( %in, %out );
GetOptions(
    help         => sub { die 'pod2usage( -verbose => 2 )' },
    'less-mem'   => \my($less_memory),
    'dir=s'      => \my($dir),
    'edge=s'     => \my($in_edge),
    'name=s'     => \my($out_name),
)
  or die 'pod2usage( -verbose => 2 )';

if ( $less_memory ) {
    require Judy;
}

# --dir automagic
#
if ( $dir ) {
    $in_edge //= catfile( $dir, 'frame.edge' );
    $out_name //= catfile( $dir, 'frame.name' );
}

my %edge;
{
    if ( $less_memory ) {
        tie %edge, 'Judy', 'Judy::L -> Judy::1';
    }
    say "Read $in_edge (@{[ pretty_size( -s $in_edge ) ]})";
    open my($fh), '<', $in_edge
        or die "Can't open $in_edge: $!";
    while (defined(my $_ = <$fh>)) {
        next if !(my($x,$y) = /^edge\(([[:xdigit:]]+),([[:xdigit:]]+)\)\.$/);
        $edge{hex "0x$x"}{hex "0x$x"} = $less_memory ? 1 : undef;
    }
}

my %name = (
    map {; $_ => sprintf '%x', $_ }
    keys %{ $edge{0} }
);

{
    open my($fh), '>', $out_name
        or die "Can't open $out_name for writing: $!";
    keys %name;
    while (defined( my $x = each %name )) {
        printf {$fh} "name(%x,'%s').\n", $x, $name{$x};
    }
    close $fh
        or die "Can't flush $out_name for writing: $!";
    say "Wrote $out_name (@{[ pretty_size( -s $out_name ) ]})";
}
