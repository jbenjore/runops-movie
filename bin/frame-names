#!/opt/perl/bin/perl
use strict;
use warnings;
use 5.010_000;
use feature ':5.10';
use Getopt::Long qw( GetOptions );
use Runops::Movie::Util qw( pretty_size  rood );
use File::Spec::Functions qw( catfile );
use Carp ();
$SIG{__WARN__} = \&Carp::cluck;

# Read options
#
my ( %in, %out );
GetOptions(
    help         => sub { die 'pod2usage( -verbose => 2 )' },
    'less-mem'   => \my($less_memory),
    'dir=s'      => \my($dir),
    'edge=s'     => \my($in_edge),
    'name=s'     => \my($out_name),
)
  or die 'pod2usage( -verbose => 2 )';

if ( $less_memory ) {
    require Judy;
}

# --dir automagic
#
if ( $dir ) {
    $in_edge //= catfile( $dir, 'frame.edge' );
    $out_name //= catfile( $dir, 'frame.name' );
}

say "Read $in_edge (@{[ pretty_size( -s $in_edge ) ]})";
open my($ifh), '<', $in_edge
    or die "Can't open $in_edge: $!";
open my($ofh), '>', $out_name
    or die "Can't open $out_name for writing: $!";
my %seen;
while (defined(my $_ = <$ifh>)) {
    next if !(my($x,$y) = /^edge\(([[:xdigit:]]+),([[:xdigit:]]+)\)\.$/);
    next if exists $seen{$x};
    $seen{$x} = undef;

    if ( $x ) {
        say {$ofh} "name($x,'$x')."
            or die "Can't write to $out_name: $!";
    }
    else {
        say {$ofh} "name(0,'').";
    }
}
close $ofh
    or die "Can't flush $out_name for writing: $!";
say "Wrote $out_name (@{[ pretty_size( -s $out_name ) ]})";
