#!/opt/perl/bin/perl
use strict;
use warnings;
use feature ':5.10';
use Storable qw( store retrieve );
use File::Basename qw( dirname );
use lib dirname( __FILE__ );
use TM qw( size );
$| = 1;
my $in_edge     = "$ARGV[0].edge";
my $in_vertex   = "$ARGV[0].vertex_size";
my $out_size    = "$ARGV[0].size";

say "Read $in_vertex (@{[ size( -s $in_vertex ) ]})";
my $vertex_size = retrieve( $in_vertex );

say "Read $in_edge (@{[ size( -s $in_edge ) ]})";
my $edge = retrieve( $in_edge );

$SIG{__WARN__} = sub {
    print "@_\n";
    if ( "@_" =~ /recursion/i ) {
        package DB;
        my $cx = 0;
        my %v;
        while ( () = caller $cx++ ) {
            ++$v{$DB::args[0]};
        }

        use Data::Dumper;
        print Dumper(\%v);
    }
};

say 'Summing vertices';
my %size;
$size{'root'} = all_successors('root');

store( \ %size, $out_size );
say "Wrote $out_size (@{[ size( -s $out_size ) ]})";

sub all_successors {
    my ( $v ) = @_;

    return $size{$v} if exists $size{$v};

    my $sum = $vertex_size->{$v} // 128;

    my $outward_edges = $edge->{$v};
    if ( $outward_edges ) {
        for my $child ( @$outward_edges) {
            my $child_sum = all_successors($child);
            $sum += $child_sum;
        }
    }

    return $size{$v} = $sum;
}
